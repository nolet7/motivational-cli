const { execSync } = require("child_process");
const fs = require("fs");
const path = require("path");
const readline = require("readline");

// Define the project directory
const os = require("os");
const projectDir = path.join(os.homedir(), "motivational-cli");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Function to check if directory exists
function directoryExists(path) {
  return fs.existsSync(path);
}

// Function to run a command and return output
function runCommand(command) {
  try {
    return execSync(command, { stdio: "inherit" });
  } catch (error) {
    console.error(`Error running command: ${command}`);
  }
}

// Function to trigger a run
function triggerRun() {
  console.log("Running automated tasks...");
  
  // Step 1: Navigate to Project Directory
  if (!directoryExists(projectDir)) {
    console.error("Project directory does not exist. Make sure the path is correct.");
    return;
  }
  process.chdir(projectDir);

  // Step 2: Ensure Dependencies are Installed
  if (!directoryExists("node_modules")) {
    console.log("Installing dependencies...");
    runCommand("npm install");
  } else {
    console.log("Dependencies already installed.");
  }

  // Step 3: Run the CLI Tool
  console.log("Running the CLI tool...");
  runCommand("node index.js");

  // Step 4: Run Tests
  console.log("Running tests...");
  runCommand("npm test");

  // Step 5: Commit and Push Changes to Trigger GitHub Actions
  console.log("Checking for changes before committing...");
  const status = execSync("git status --porcelain").toString().trim();

  if (status) {
    console.log("Changes detected. Adding all modified and untracked files...");
    runCommand("git add -A"); // Add all changes, including untracked files
    runCommand("git commit -m 'Automated trigger from run_it script'");
    runCommand("git push origin main");
  } else {
    console.log("No changes detected. Skipping commit and push.");
  }

  console.log("All steps completed successfully!");
}

// Function to continuously ask user if they want to run the automation
function askToRun() {
  const timeout = setTimeout(() => {
    console.log("\nNo response detected. Exiting automation...");
    rl.close();
    process.exit(0);
  }, 30000); // 30 seconds timeout

  rl.question("Do you want to run the automation? (yes/no): ", (answer) => {
    clearTimeout(timeout); // Reset timeout if user responds
    if (answer.toLowerCase() === "yes") {
      triggerRun();
      askToRun(); // Keep asking after each run
    } else {
      console.log("Automation cancelled.");
      rl.close();
    }
  });
}

// Start the process
askToRun();

// Instructions on how to run the script
console.log("\nTo run this script, execute:");
console.log("chmod +x run_it && ./run_it");

